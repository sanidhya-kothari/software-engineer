// basic linux commands

pwd
ls
cd
cd drive/folder/workspace/project
cd ..
mkdir project-1
mkdir project-2
mkdir project-3
ls -la

// git configurations

git config --global user.email "user@gmail.com"
git config --global user.name "username"
git config --global core.editor "code --wait"
git config --list

// mention the files that needs to be ignored from tracking
.gitignore
// by default empty folders are not tracked therefore to track empty folder keep this file in that folder
.gitkeep

// lifecycle
git init
// working area
git add
// staging area
git commit
// repository
git push
// github, gitlab, etc...

// log and reflog

git log            // to get logs
git log --oneline  // to get one line log
git reflog         // more precise logs

// basics

cd drive/folder/workspace/project
git status
git init
// working area
git add <file-1> <file-2>  // good, selected files
git add .                  // better, current repository
git add -A                 // best, entire repository
// staging area
git commit -m "message"                               // commit on current date
git commit --date "YYYY-MM-DD HH:MM:SS" -m "message"  // commit on specific date
// repository
git remote add origin https://github.com/username/repository-name.git
git remote -v 
git push -u origin main

// branch

git branch                   // list all branches
git branch new-branch-1      // create a new branch
git branch                   // show the current branch
git switch new-branch-1      // switch to the specified branch
git branch                   // show the current branch
git switch master            // switch to the specified branch
git branch                   // show the current branch
git switch -c new-branch-2   // create a branch and switch to that branch in single code
git branch                   // show the current branch
git switch master            // switch to the specified branch
git branch                   // show the current branch
git checkout new-branch-3    // checks if the branch exists or not, if exists then head gets switched else shows error
git branch                   // show the current branch
git log --oneline            // all logs in one line
git checkout master          // checks if the branch exists or not, if exists then head gets switched else shows error
git merge bug-fix            // merge the specified branch to the current branch
git branch                   // show the current branch
git branch -m <old-branch-name> <new-branch-name>  // rename a branch
git branch -d <branch-name>  // delete a branch

// note
// when merging two branches keep in mind that the files changed in both the branches must be added and committed
// during merging remove the below template in order to successfully reflect the changes in current branch
// <<<<< branch-name (current change)
// =====
// >>>>> branch-name (incoming change)
// the incoming branch will still contain the old data
// after removing the template, again add and commit the file

// diff

git diff --staged
git diff <branch-name-1> <branch-name-2>
git diff branch-name-1..branch-name-2
git diff <commit-hash-1> <commit-hash-2>
git diff commit-hash-1..commit-hash-2

// stash

git stash
git stash save "custom-name"
git stash list
git stash apply 
git stash apply stash@{0}
git stash apply stash@{0} <branch-name>
git stash pop
git stash drop
git stash clear

// tag

git tag
git tag <tag-name>
git tag -a <tag-name> -m "message"
git tag <tag-name> <commit-hash>

// rebase

git checkout fix
git rebase master

// recover lost commits or changes

git reset --hard <commit-hash>

// github integration

git branch -m main
git remote -v
git remote add origin https://github.com/username/repository.git
git push -u origin main
















